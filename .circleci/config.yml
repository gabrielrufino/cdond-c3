version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Save Backend url
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --region "${AWS_DEFAULT_REGION}" --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            curl -H "Content-Type: text/plain" -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/backend_url
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --region "${AWS_DEFAULT_REGION}" --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            yum -y install tar gzip jq
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: Rollback
          command: |
            aws cloudformation delete-stack  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ce:e6:6c:4a:2a:4b:10:07:17:15:15:4d:21:5d:6d:e5]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations >> result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend/
            cat result.txt
            RESULT=$(grep -Fc "has been executed successfully" result.txt)
            curl -H "Content-Type: text/plain" -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request PUT --data ${RESULT} https://api.memstash.io/values/migration_result
      # Here's where you will add some code to rollback on failure      

  #deploy-frontend:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #          export API_URL="http://${BACKEND_IP}:3030"
  #          echo "${API_URL}"
  #    - run:
  #        name: Deploy frontend objects
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
  #  docker:
  #    # Docker image here that supports Ansible
  #  steps:
  #    # Checkout code from git
  #    # Add ssh keys with fingerprint
  #    # attach workspace
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Deploy backend
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

  #smoke-test:
  #  docker:
  #    # Lightweight Docker image 
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #    - run:
  #        name: Backend smoke test.
  #        command: |
  #          # your code here
  #    - run:
  #        name: Frontend smoke test.
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Update cloudfront distribution
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]