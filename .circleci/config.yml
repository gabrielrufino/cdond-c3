version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}/" --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request GET https://api.memstash.io/values/migration_result)
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Save Backend url
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --region "${AWS_DEFAULT_REGION}" --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            curl -H "Content-Type: text/plain" -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/backend_url
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=$(aws ec2 describe-instances --region "${AWS_DEFAULT_REGION}" --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            yum -y install tar gzip jq
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: Rollback
          command: |
            aws cloudformation delete-stack  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
          when: on_fail
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ce:e6:6c:4a:2a:4b:10:07:17:15:15:4d:21:5d:6d:e5]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pip install ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get update
            sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            echo > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations >> result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend/
            RESULT=$(cat result.txt | { grep -Fc "has been executed successfully" || :; })
            curl -H "Content-Type: text/plain" -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request PUT --data "${RESULT}" https://api.memstash.io/values/migration_result
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make 
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            cd frontend
            BACKEND_IP=$(curl -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request GET https://api.memstash.io/values/backend_url)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" > ".env"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID}"
      - revert-migrations
      - destroy-environment   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ce:e6:6c:4a:2a:4b:10:07:17:15:15:4d:21:5d:6d:e5]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update curl
            pip3 --no-cache-dir install awscli
      - run:
          name: Deploy backend
          command: |
            tar -cf backend.tar ./backend
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(curl -H "token: 7fa6d083-1eb9-49f2-838f-ff3145ce3075" --request GET https://api.memstash.io/values/backend_url)
            curl "http://${BACKEND_URL}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
              then
                exit 1
            fi
      - revert-migrations
      # - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            yum -y install tar gzip jq
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameters 
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/awscli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive)
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update